<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIBUAAAEAIAD8CgAAFgAAACgAAAAgAAAAKgAAAAEAIAAAAAAAgAoAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWHiRAHmk
        xgB0nr4Id6LDKnikxUt4o8VFeKPFHHagwQF3ocMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdqLBAHij
        xAB3o8QHeKTFR3ikxqx5pcfpeaXH/Hmlx/p5pcfWeaXHenmkxh6BsdYAd6HCAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHah
        wwB2oMECeKLEL3mlxqF5pcfyeaXH/3mlx+h5pcemeaXHwXmlx/h5pcf+eaXH0HijxWB3ocMReaXHAHKa
        ugAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG2V
        tQCNwOUAd6LDHnmkxod5pcfjeaXH/3mlx+p5pceYeKTGNHeixAN4o8UOeaXHU3mlx7p5pcf3eaXH+Xmk
        xr93o8VSdqHCDHeixABxl7cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFp6
        lAB8qcsAdqHCEHikxWV5pMbNeaXH+Xmlx/55pcereaTGN3ijxSB4pMVOeKTGC3ikxkN4pMY0eKPFE3ml
        x1R5pcfXeaXH/3mlx+95pca2eKTGT3ejxQl4pMYAdZ/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAB3o8QAdZ6+B3eixEh5pMa8eaXH3nmkxnp5pMaveaXH+XmlxkV5pcYOeaXHunmlx+t5pcd1eaXHvXml
        x+x5pMZOeqbIAHmlx415pcf/eaXHmXmlx6B5pcfmeaXGrnikxj14o8UDeKTGAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAeKPEAHijxBx4o8WdeaXG4Xmlxpp4pMYxdJu8A3mkxp55pcf8eaXHRnmlxhd5pcfbeaXH8Xml
        x155pcejeaXH/3ikxnB6pskAeaXHg3mlx/94pMZveKPFA3mlx0d5pce4eaXH5Xmkxox5pccUeaXHAAAA
        AAAAAAAAAAAAAAAAAAB5pMYAeaTGSXmlx/p5pceXdqHCBXijxAB2nb4CeaXGonmlx/x5pcdGeKPEEnmk
        xph4pMVaeKTGE3ikxi14pMaDeKTGTXmlxwB5pcd/eaXH/3mkxnR5psgAeaTGAHmkxg95pcereaXH+nml
        x0p5pccAAAAAAAAAAAAAAAAAAAAAAHmlxgB5pcZJeaXH+3mlx4V5pccAd6HCAGuEngF5pMabeaXH/nml
        x1F8qs0AeKPFHXmlx2p5pcezeaXHpnmlx1V5pMYReaXHAHmlx3x5pcf/eaTGdnmmyAB5pMYAeabIAHml
        x5B5pcf/eaXHW3mlxwAAAAAAAAAAAAAAAAAAAAAAeaXGAHmlxkx5pcf8eaXHinmlxwB3ocMAaIWjAXmk
        xpt5pcf/eaXHbnmlx1p5pcfLeaXH1HikxlN4pMZXeaXHz3mlx7l5pcdUeaXHjnmlx/95pMZ5eabIAHik
        xgAAK00AeaXHmHmlx/95pcddeaXHAAAAAAAAAAAAAAAAAAAAAAB5pMYAeaTGTHmlx/x5pcePeaXHAHeh
        wwA9LUgAeaTGmHmlx/95pcfoeaXH9nmlxrd4o8UvgK7OAHyt0AB4o8UteaTGtXmlx/Z5pcfweaXH/3ik
        xnp6psgAeKTGAHyqzAB5pceUeaXH/3mlx1d5pccAAAAAAAAAAAAAAAAAAAAAAHmlxwB5pcdReaXH/Xml
        x4d5pccAd6DCAIW/5AB5pMaTeaXH/3mlx/R5pMaKeKPEE3ikxgB0nL4AdJ2+AHmlxwB4o8USeaTGg3ml
        x/B5pcf/eaTGfHmmyAB5pccAeaXHAHmlx495pcf9eaXHUnmlxwAAAAAAAAAAAAAAAAAAAAAAeaXHAHml
        x1N5pcf9eaXHgXmlxwB2n8AAgbPYAHikxpF5pcfjeaTGXneiwwd3osQAe6PCAHqiwgR6osIEe6PCAHij
        xAB3ocIEeaTGV3mlx9t5pcd+eaXHAHmlxwB5pccAeaXHjXmlx/15pcdPeaXHAAAAAAAAAAAAAAAAAAAA
        AAB5pccAeaXHTnmlx/x5pcaBeaXIAHehwgB8qMsAeaTGNnikxjV1nsABd6HDAHmmyQB4o8UeeaXGl3ml
        xph5pMYpeabIAHikxQBwnL0AeaTGKnmkxS95pccAeaXHAHmlxwB5pceLeaXH/Xmlx055pccAAAAAAAAA
        AAAAAAAAAAAAAHmlxwB5pcdPeaXH/HmlxoN5pcgAeaXGAAAAAAAAAAAAAAAAAHagwgBznLsBeKTFQnml
        x8p5pMbeeaXHznmlx9t5pcdeeaXGB3mlxwAAAAAAAAAAAAAAAAB5pccAeaXHAHmlx4l5pcf9eaXHUXml
        xwAAAAAAAAAAAAAAAAAAAAAAeaXHAHmlx055pcf8eaXHhHmlxwB5pccAAAAAAHOWtAB4o8UAeKPEDnmk
        xnZ5pcfleaTGs3agwjB5pccceaXHmHmlx+h5pceaeaXHIHqlyAB3o8QAAAAAAHmlxwB5pccAeaXHjnml
        x/55pcdTeaXHAAAAAAAAAAAAAAAAAAAAAAB5pccAeaXHQnmlx/d5pMaDcpu7AXikxgN4pMYDeKXHAnmk
        xih5pceseaXH63ikxX13o8QQeaXHAHmkxgB4pMYGeaXHW3mlx9t5pcfLeaXHRnmlxxB5pccReaXHD3mk
        xgx5pceVeaXH+3mlx0t5pccAAAAAAAAAAAAAAAAAAAAAAHijxQB4o8UieaXG2nmlx9p5pceseaXHrHml
        x615pceteaXH1nmlx9J4o8VMc529BHagwQAAAAAAAAAAAHikxgBvnsAAeaTGKHmlx6N5pcfieaXHyHml
        x8h5pcfGeaXHw3mlx+F5pcfleKTGL3ikxgAAAAAAAAAAAAAAAAAAAAAAcpi4AHCTsgJ4o8Q8eKTGanik
        xmt4pMVreKPFa3ijxWx4o8VleKPFJHmnygB2oMEAAAAAAAAAAAAAAAAAAAAAAHGUtgB5pMYAeKTGDHml
        xkV5pcdUeaXHUnmlxlZ4pMZYeaXHUXijxT50nr4GdZ6/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////gf///g
        D///gAP//wAA//wAAD/wABAP4AAQB+EAEYfjCBHH4wABx+OBgcfjg8HH44Zhx+OMOcfj8A/H4+AHx+AB
        gAfgA+AH4A/wB/////8=
</value>
  </data>
</root>